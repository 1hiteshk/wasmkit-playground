{
  "NeutronVotingRegistryContract": {
    "schemaData": [
      {
        "kind": "typeAlias",
        "name": "ExecuteMsg",
        "properties": [
          {
            "name": "type",
            "type": "{\n  add_voting_vault: {\n    new_voting_vault_contract: string;\n    [k: string]: unknown;\n  };\n} | {\n  remove_voting_vault: {\n    old_voting_vault_contract: string;\n    [k: string]: unknown;\n  };\n} | {\n  update_config: {\n    owner: string;\n    [k: string]: unknown;\n  };\n}"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "InstantiateMsg",
        "properties": [
          {
            "name": "owner",
            "type": "string"
          },
          {
            "name": "voting_vaults",
            "type": "string[]"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "QueryMsg",
        "properties": [
          {
            "name": "type",
            "type": "{\n  dao: {};\n} | {\n  config: {};\n} | {\n  voting_vaults: {};\n} | {\n  voting_power_at_height: {\n    address: string;\n    height?: number | null;\n  };\n} | {\n  total_power_at_height: {\n    height?: number | null;\n  };\n} | {\n  info: {};\n}"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "Addr",
        "properties": [
          {
            "name": "type",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "Config",
        "properties": [
          {
            "name": "owner",
            "type": "Addr"
          },
          {
            "name": "voting_vaults",
            "type": "Addr[]"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "InfoResponse",
        "properties": [
          {
            "name": "info",
            "type": "ContractVersion"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "ContractVersion",
        "properties": [
          {
            "name": "contract",
            "type": "string"
          },
          {
            "name": "version",
            "type": "string"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "Uint128",
        "properties": [
          {
            "name": "type",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "TotalPowerAtHeightResponse",
        "properties": [
          {
            "name": "height",
            "type": "number"
          },
          {
            "name": "power",
            "type": "Uint128"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "VotingPowerAtHeightResponse",
        "properties": [
          {
            "name": "height",
            "type": "number"
          },
          {
            "name": "power",
            "type": "Uint128"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "Array_of_VotingVault",
        "properties": [
          {
            "name": "type",
            "type": "VotingVault[]"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "VotingVault",
        "properties": [
          {
            "name": "address",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "NeutronVotingRegistryReadOnlyInterface",
        "properties": [
          {
            "name": "dao",
            "type": "() => Promise<any>"
          },
          {
            "name": "config",
            "type": "() => Promise<any>"
          },
          {
            "name": "votingVaults",
            "type": "() => Promise<any>"
          },
          {
            "name": "votingPowerAtHeight",
            "type": "({\n    address,\n    height\n  }: {\n    address: string;\n    height: number | null;\n  }) => Promise<any>"
          },
          {
            "name": "totalPowerAtHeight",
            "type": "({\n    height\n  }: {\n    height: number | null;\n  }) => Promise<any>"
          },
          {
            "name": "info",
            "type": "() => Promise<any>"
          }
        ]
      },
      {
        "kind": "class",
        "name": "NeutronVotingRegistryQueryContract",
        "properties": [
          {
            "name": "dao",
            "type": "unknown"
          },
          {
            "name": "config",
            "type": "unknown"
          },
          {
            "name": "votingVaults",
            "type": "unknown"
          },
          {
            "name": "votingPowerAtHeight",
            "type": "unknown"
          },
          {
            "name": "totalPowerAtHeight",
            "type": "unknown"
          },
          {
            "name": "info",
            "type": "unknown"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "NeutronVotingRegistryInterface",
        "properties": [
          {
            "name": "addVotingVault",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }, {\n    newVotingVaultContract\n  }: {\n    newVotingVaultContract: string;\n  }) => Promise<any>"
          },
          {
            "name": "removeVotingVault",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }, {\n    oldVotingVaultContract\n  }: {\n    oldVotingVaultContract: string;\n  }) => Promise<any>"
          },
          {
            "name": "updateConfig",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }, {\n    owner\n  }: {\n    owner: string;\n  }) => Promise<any>"
          }
        ]
      },
      {
        "kind": "class",
        "name": "NeutronVotingRegistryContract",
        "properties": [
          {
            "name": "addVotingVault",
            "type": "unknown"
          },
          {
            "name": "removeVotingVault",
            "type": "unknown"
          },
          {
            "name": "updateConfig",
            "type": "unknown"
          }
        ]
      }
    ]
  }
}